import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  ScrollView,
  TouchableOpacity,
  Alert
} from 'react-native';
import { COLORS } from '../constants/colors';
import { useNutrition } from '../context/NutritionContext';

const RecipeDetailModal = ({ visible, recipe, onClose }) => {
  const { startTimer, updateRecipeStatus } = useNutrition();
  const [currentStep, setCurrentStep] = useState(0);

  if (!recipe) return null;

  const steps = [
    '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤',
    '–û—Å–Ω–æ–≤–Ω–∞—è –≥–æ—Ç–æ–≤–∫–∞',
    '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
    '–£–ø–∞–∫–æ–≤–∫–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã'
  ];

  const handleStartCooking = () => {
    updateRecipeStatus(recipe.id, 'cooking');
    startTimer(`${recipe.name} - –≥–æ—Ç–æ–≤–∫–∞`, recipe.prepTime);
    Alert.alert('–ì–æ—Ç–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞!', `–¢–∞–π–º–µ—Ä –Ω–∞ ${recipe.prepTime} –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω`);
  };

  const handleCompleteStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      updateRecipeStatus(recipe.id, 'completed');
      Alert.alert('–†–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤!', '–ë–ª—é–¥–æ –º–æ–∂–Ω–æ —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã');
      onClose();
    }
  };

  return (
    <Modal visible={visible} animationType="slide" presentationStyle="pageSheet">
      <View style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={onClose}>
            <Text style={styles.closeButton}>‚úï</Text>
          </TouchableOpacity>
          <Text style={styles.title}>{recipe.name}</Text>
          <View style={styles.placeholder} />
        </View>

        <ScrollView style={styles.content}>
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ü–µ–ø—Ç–µ */}
          <View style={styles.infoSection}>
            <View style={styles.infoRow}>
              <Text style={styles.infoLabel}>–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:</Text>
              <Text style={styles.infoValue}>{recipe.prepTime} –º–∏–Ω</Text>
            </View>
            <View style={styles.infoRow}>
              <Text style={styles.infoLabel}>–ü–æ—Ä—Ü–∏–π:</Text>
              <Text style={styles.infoValue}>{recipe.servings}</Text>
            </View>
            <View style={styles.infoRow}>
              <Text style={styles.infoLabel}>–ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ –ø–æ—Ä—Ü–∏—é:</Text>
              <Text style={styles.infoValue}>{recipe.nutrition.calories} –∫–∫–∞–ª</Text>
            </View>
            <View style={styles.infoRow}>
              <Text style={styles.infoLabel}>–ò–Ω—Å—É–ª–∏–Ω –Ω–∞ –ø–æ—Ä—Ü–∏—é:</Text>
              <Text style={styles.infoValue}>{recipe.insulin} –µ–¥</Text>
            </View>
          </View>

          {/* –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üõí –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</Text>
            {recipe.ingredients.map((ingredient, index) => (
              <View key={index} style={styles.ingredientItem}>
                <Text style={styles.ingredientName}>{ingredient.name}</Text>
                <Text style={styles.ingredientAmount}>
                  {ingredient.amount} {ingredient.unit}
                </Text>
              </View>
            ))}
          </View>

          {/* –®–∞–≥–∏ –≥–æ—Ç–æ–≤–∫–∏ */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üë®‚Äçüç≥ –ü—Ä–æ—Ü–µ—Å—Å –≥–æ—Ç–æ–≤–∫–∏</Text>
            {steps.map((step, index) => (
              <View
                key={index}
                style={[
                  styles.stepItem,
                  index === currentStep && styles.activeStep,
                  index < currentStep && styles.completedStep
                ]}
              >
                <View style={styles.stepNumber}>
                  <Text style={styles.stepNumberText}>
                    {index < currentStep ? '‚úì' : index + 1}
                  </Text>
                </View>
                <Text style={[
                  styles.stepText,
                  index === currentStep && styles.activeStepText,
                  index < currentStep && styles.completedStepText
                ]}>
                  {step}
                </Text>
              </View>
            ))}
          </View>
        </ScrollView>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <View style={styles.actions}>
          {recipe.status === 'pending' && (
            <TouchableOpacity
              style={styles.startButton}
              onPress={handleStartCooking}
            >
              <Text style={styles.startButtonText}>üöÄ –ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∫—É</Text>
            </TouchableOpacity>
          )}
          
          {recipe.status === 'cooking' && (
            <TouchableOpacity
              style={styles.nextButton}
              onPress={handleCompleteStep}
            >
              <Text style={styles.nextButtonText}>
                {currentStep < steps.length - 1 ? '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç'}
              </Text>
            </TouchableOpacity>
          )}
          
          {recipe.status === 'completed' && (
            <View style={styles.completedContainer}>
              <Text style={styles.completedText}>‚úÖ –†–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤!</Text>
            </View>
          )}
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    backgroundColor: COLORS.surface,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  closeButton: {
    fontSize: 24,
    color: COLORS.textSecondary,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.text,
  },
  placeholder: {
    width: 24,
  },
  content: {
    flex: 1,
    padding: 20,
  },
  infoSection: {
    backgroundColor: COLORS.surface,
    padding: 15,
    borderRadius: 12,
    marginBottom: 20,
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  infoLabel: {
    fontSize: 14,
    color: COLORS.textSecondary,
  },
  infoValue: {
    fontSize: 14,
    fontWeight: '600',
    color: COLORS.text,
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.text,
    marginBottom: 15,
  },
  ingredientItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  ingredientName: {
    fontSize: 16,
    color: COLORS.text,
  },
  ingredientAmount: {
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.textSecondary,
  },
  stepItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 15,
    marginBottom: 8,
    backgroundColor: COLORS.surface,
    borderRadius: 8,
  },
  activeStep: {
    backgroundColor: COLORS.primary + '20',
    borderWidth: 1,
    borderColor: COLORS.primary,
  },
  completedStep: {
    backgroundColor: COLORS.success + '20',
  },
  stepNumber: {
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: COLORS.border,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  stepNumberText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: COLORS.text,
  },
  stepText: {
    fontSize: 16,
    color: COLORS.text,
  },
  activeStepText: {
    fontWeight: '600',
    color: COLORS.primary,
  },
  completedStepText: {
    color: COLORS.success,
  },
  actions: {
    padding: 20,
    backgroundColor: COLORS.surface,
    borderTopWidth: 1,
    borderTopColor: COLORS.border,
  },
  startButton: {
    backgroundColor: COLORS.primary,
    padding: 15,
    borderRadius: 12,
    alignItems: 'center',
  },
  startButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.surface,
  },
  nextButton: {
    backgroundColor: COLORS.success,
    padding: 15,
    borderRadius: 12,
    alignItems: 'center',
  },
  nextButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.surface,
  },
  completedContainer: {
    padding: 15,
    alignItems: 'center',
  },
  completedText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.success,
  },
});

export default RecipeDetailModal;